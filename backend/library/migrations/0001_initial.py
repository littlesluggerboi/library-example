# Generated by Django 5.2.4 on 2025-07-29 23:46

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('location', models.CharField(blank=True, max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='LibraryMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=200)),
                ('last_name', models.CharField(max_length=200)),
                ('middle_name', models.CharField(max_length=200, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('date_of_death', models.DateField(blank=True, null=True)),
            ],
            options={
                'constraints': [models.CheckConstraint(condition=models.Q(('date_of_birth__isnull', True), ('date_of_birth__lte', datetime.datetime(2025, 7, 29, 23, 46, 10, 340417, tzinfo=datetime.timezone.utc)), _connector='OR'), name='date_of_birth_lte_today'), models.CheckConstraint(condition=models.Q(('date_of_death__isnull', True), ('date_of_death__lte', datetime.datetime(2025, 7, 29, 23, 46, 10, 340454, tzinfo=datetime.timezone.utc)), _connector='OR'), name='date_of_death_lte_today'), models.CheckConstraint(condition=models.Q(('date_of_death__gte', models.F('date_of_birth'))), name='date_of_death_gte_date_of_birth')],
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('summary', models.TextField()),
                ('publication_date', models.DateField(blank=True, null=True)),
                ('isbn', models.CharField(blank=True, max_length=13, null=True, unique=True)),
                ('authors', models.ManyToManyField(related_name='books', to='library.author')),
            ],
        ),
        migrations.CreateModel(
            name='BookInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_number', models.PositiveIntegerField()),
                ('date_borrowed', models.DateField(default=django.utils.timezone.now, null=True)),
                ('due_back', models.DateField(default=datetime.datetime(2025, 8, 12, 23, 46, 10, 342463, tzinfo=datetime.timezone.utc), null=True)),
                ('status', models.CharField(choices=[('Available', 'Available'), ('On Loan', 'On Loan'), ('Unavailable', 'Unavailable')], default='Available', max_length=50)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='copies', to='library.book')),
            ],
        ),
        migrations.CreateModel(
            name='BookInstanceBorrowerRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_borrowed', models.DateTimeField()),
                ('due_back', models.DateField()),
                ('date_returned', models.DateField()),
                ('book_instance', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='library.bookinstance')),
                ('borrower', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'constraints': [models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='genre_name_case_insensitive_unique', violation_error_message='Genre already exists (case insensitive match).')],
            },
        ),
        migrations.AddField(
            model_name='book',
            name='genre',
            field=models.ManyToManyField(related_name='books', to='library.genre'),
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'constraints': [models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='language_name_case_insensitive_unique', violation_error_message='Language already exists (case insensitive match).')],
            },
        ),
        migrations.AddField(
            model_name='book',
            name='language',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='library.language'),
        ),
        migrations.AddField(
            model_name='book',
            name='publisher',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='library.publisher'),
        ),
        migrations.AddConstraint(
            model_name='bookinstance',
            constraint=models.CheckConstraint(condition=models.Q(('date_borrowed__isnull', True), ('date_borrowed__gte', datetime.datetime(2025, 7, 29, 23, 46, 10, 342677, tzinfo=datetime.timezone.utc)), _connector='OR'), name='date_borrowed_null_or_gte_today'),
        ),
        migrations.AddConstraint(
            model_name='bookinstance',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('due_back__isnull', True), ('date_borrowed__isnull', True)), models.Q(('date_borrowed__isnull', False), ('due_back__isnull', False), ('due_back__gte', models.F('date_borrowed'))), _connector='OR'), name='both_null_or_present_and_due_back_gte_due_back'),
        ),
        migrations.AlterUniqueTogether(
            name='bookinstance',
            unique_together={('book', 'book_number')},
        ),
        migrations.AddConstraint(
            model_name='book',
            constraint=models.CheckConstraint(condition=models.Q(('publication_date__isnull', True), ('publication_date__lte', datetime.datetime(2025, 7, 29, 23, 46, 10, 341210, tzinfo=datetime.timezone.utc)), _connector='OR'), name='publication_date_cannot_be_after_today'),
        ),
    ]
